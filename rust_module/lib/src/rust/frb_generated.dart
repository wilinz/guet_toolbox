// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/rscrypto.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiRscryptoInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => -541531031;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rsmodule',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String crateApiRscryptoDecryptAes128Cbc64Prefix(
      {required String encryptedBase64, required List<int> key});

  String crateApiRscryptoEncryptAes128Cbc64Prefix(
      {required String plain, required List<int> key});

  String crateApiRscryptoGetDecryptWebVpnHost(
      {required String ciphertext,
      required List<int> key,
      required List<int> iv});

  String crateApiRscryptoGetEncryptWebVpnHost(
      {required String plaintext,
      required List<int> key,
      required List<int> iv});

  String crateApiRscryptoGetWebVpnOrdinaryUrl(
      {required String url, required List<int> key, required List<int> iv});

  String crateApiRscryptoGetWebVpnUrl(
      {required String url,
      required List<int> key,
      required List<int> iv,
      required String vpnBaseUrl});

  Future<void> crateApiRscryptoInitApp();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiRscryptoDecryptAes128Cbc64Prefix(
      {required String encryptedBase64, required List<int> key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(encryptedBase64, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoDecryptAes128Cbc64PrefixConstMeta,
      argValues: [encryptedBase64, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoDecryptAes128Cbc64PrefixConstMeta =>
      const TaskConstMeta(
        debugName: "decrypt_aes_128_cbc_64prefix",
        argNames: ["encryptedBase64", "key"],
      );

  @override
  String crateApiRscryptoEncryptAes128Cbc64Prefix(
      {required String plain, required List<int> key}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(plain, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoEncryptAes128Cbc64PrefixConstMeta,
      argValues: [plain, key],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoEncryptAes128Cbc64PrefixConstMeta =>
      const TaskConstMeta(
        debugName: "encrypt_aes_128_cbc_64prefix",
        argNames: ["plain", "key"],
      );

  @override
  String crateApiRscryptoGetDecryptWebVpnHost(
      {required String ciphertext,
      required List<int> key,
      required List<int> iv}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ciphertext, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        sse_encode_list_prim_u_8_loose(iv, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoGetDecryptWebVpnHostConstMeta,
      argValues: [ciphertext, key, iv],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoGetDecryptWebVpnHostConstMeta =>
      const TaskConstMeta(
        debugName: "get_decrypt_web_vpn_host",
        argNames: ["ciphertext", "key", "iv"],
      );

  @override
  String crateApiRscryptoGetEncryptWebVpnHost(
      {required String plaintext,
      required List<int> key,
      required List<int> iv}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(plaintext, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        sse_encode_list_prim_u_8_loose(iv, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoGetEncryptWebVpnHostConstMeta,
      argValues: [plaintext, key, iv],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoGetEncryptWebVpnHostConstMeta =>
      const TaskConstMeta(
        debugName: "get_encrypt_web_vpn_host",
        argNames: ["plaintext", "key", "iv"],
      );

  @override
  String crateApiRscryptoGetWebVpnOrdinaryUrl(
      {required String url, required List<int> key, required List<int> iv}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        sse_encode_list_prim_u_8_loose(iv, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoGetWebVpnOrdinaryUrlConstMeta,
      argValues: [url, key, iv],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoGetWebVpnOrdinaryUrlConstMeta =>
      const TaskConstMeta(
        debugName: "get_web_vpn_ordinary_url",
        argNames: ["url", "key", "iv"],
      );

  @override
  String crateApiRscryptoGetWebVpnUrl(
      {required String url,
      required List<int> key,
      required List<int> iv,
      required String vpnBaseUrl}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        sse_encode_list_prim_u_8_loose(key, serializer);
        sse_encode_list_prim_u_8_loose(iv, serializer);
        sse_encode_String(vpnBaseUrl, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoGetWebVpnUrlConstMeta,
      argValues: [url, key, iv, vpnBaseUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoGetWebVpnUrlConstMeta =>
      const TaskConstMeta(
        debugName: "get_web_vpn_url",
        argNames: ["url", "key", "iv", "vpnBaseUrl"],
      );

  @override
  Future<void> crateApiRscryptoInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRscryptoInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRscryptoInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
