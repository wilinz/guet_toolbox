name: Release Android Test
# MINIO_ENDPOINT
# MINIO_ACCESS_KEY
# MINIO_SECRET_KEY

# ANDROID_KEY_BASE64
# ANDROID_KS_PASS
# ANDROID_KEY_ALIAS

on:
  workflow_dispatch:

jobs:
  build_android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:' # optional, change this to specify the cache path
          architecture: x64 # optional, x64 or arm64
          flutter-version: 3.27.1
      - run: flutter --version

      - name: Build for Android
        run: flutter build apk --release

      - name: Key base64 to file
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'android_key.jks'
          fileDir: '/tmp/.android_key/'
          encodedString: ${{ secrets.ANDROID_KEY_BASE64 }}

      - name: Install apksigner
        run: sudo apt install apksigner

      - name: Sign apk
        env:
          ANDROID_KS_PASS: ${{ secrets.ANDROID_KS_PASS }}
        run: |
          for file in build/app/outputs/flutter-apk/*.apk; do
                filename="${file##*/}"
                echo "Signing ${filename}"
                apksigner sign --v4-signing-enabled false --ks /tmp/.android_key/android_key.jks --ks-pass env:ANDROID_KS_PASS --ks-key-alias ${{ secrets.ANDROID_KEY_ALIAS }} ${file}
              done

      - name: Get apk info
        id: apk-info
        uses: hkusu/apk-info-action@v1
        with:
          apk-path: build/app/outputs/flutter-apk/app-release.apk

      - name: Rename Apk And Move Apk
        run: |
          mkdir -p build/app/outputs/my-release
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/my-release/guethub-android-v${{ steps.apk-info.outputs.version-name }}.apk
          
#      - name: Minio Deploy
#        uses: hkdobrev/minio-deploy-action@v1
#        with:
#          endpoint: ${{ secrets.MINIO_ENDPOINT }}
#          access_key: ${{ secrets.MINIO_ACCESS_KEY }}
#          secret_key: ${{ secrets.MINIO_SECRET_KEY }}
#          bucket: 'guethub-release'
#          # Optional inputs with their defaults:
#          source_dir: 'build/app/outputs/my-release'
#          target_dir: '/v${{ steps.apk-info.outputs.version-name }}'

      - name: Upload apk to artifact
        uses: actions/upload-artifact@v3
        with:
          name: guethub-android-v${{ steps.apk-info.outputs.version-name }}.apk
          path: build/app/outputs/my-release/guethub-android-v${{ steps.apk-info.outputs.version-name }}.apk

#      - name: Upload x86_64 to artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: app-x86_64-release.apk
#          path: build/app/outputs/flutter-apk/app-x86_64-release.apk
#
#      - name: Upload arm64-v8a to artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: app-arm64-v8a-release.apk
#          path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
#
#      - name: Upload armeabi-v7a to artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: app-armeabi-v7a-release.apk
#          path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk

#      - name: Package as zip
#        run: |
#          cd build/windows/runner/Debug
#          zip -q -r ../guet-toolbox-windows-debug.zip ./*
#          cd ../../../../
#
#      - name: Upload to artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: guet-toolbox-windows-debug.zip
#          path: build/windows/runner/guet-toolbox-windows-debug.zip
